查询远程仓库：
git remote命令可以列出所有的远程仓库，至少有一个origin，这是git给克隆的远程仓库服务器的默认名字。加上-v选项会显示需要读写的远程仓库名字简写及其对应的URL地址。
git ls-remote (remote) 显式地获得远程引用的完整列表。
git remote show (remote) 获得远程分支的更多信息。
添加远程仓库：
git clone命令会把一个远程仓库复制到本地。可以同时有多个远程仓库。
git remote add <shortname> <url> 添加一个新的远程 Git 仓库，同时指定一个你可以轻松引用的简写。
从远程仓库抓取与拉取：
git fetch --all 添加多个远程仓库后，获取所有的远程分支。
git fetch <shortname> 拉取指定的远程仓库，或者指定要获取的分支名<shortname>/master。fetch命令会拉取远程仓库的所有更新数据到本地，但它不会自动修改或合并你当前的工作。
pull命令会自动抓取并合并远程分支到当前分支。如果你有一个分支设置跟踪一个远程分支，pull 命令来自动的抓取然后合并远程分支到当前分支。默认情况下，clone命令会自动设置本地master分支跟踪克隆的远程仓库的master分支，pull通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。
推送到远程仓库：
git push [remote-name] [branch-name]命令可以将你的更改推送到远程服务器。如果在你推送之前已经有其他人先修改并推送了，你必须先拉取合并后才能推送。
查看远程仓库：
git remote show [remote-name]命令可以查看远程仓库更多的信息。
远程仓库的移除与重命名：
git remote rm <shortname>用这个命令可以删除一个远程仓库。
git remote rename <oldname> <newname>用这个命令可以给一个已经添加的远程仓库重新命名。
git push <shortname> --delete [branch-name] 删除一个指定的远程分支。

远程跟踪分支是远程分支状态的引用，是不能移动的本地引用，当你做任何网络通信操作时，它们会自动移动。 远程跟踪分支像是你上次连接到远程仓库时，那些分支所处状态的书签。它们以 (remote)/(branch) 形式命名，例如origin/master分支。
从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的本地 master 分支。
git checkout -b [branch] [remotename]/[branch]  设置一个远程分支的本地跟踪分支，两个分支的名称可以不同。
git checkout --track [remotename]/[branch]  设置跟踪分支的快捷方式，远程分支的与本地跟踪分支名称相同。
git branch -u [remotename]/[branch]   可以在任意时间使用 -u 或 --set-upstream-to 选项来显式地设置已有的当前本地分支跟踪一个刚刚拉取下来的远程分支，或者修改当前本地分支正在跟踪的上游分支。
git branch -vv  查看跟踪分支的详细信息。

变基
git rebase newbasebranch 如果远程仓库发生了变动，本地的跟踪分支也发生了变动，这是会出现分叉，可以先把远程分支fetch下来，把当前分支切换到本地分支上，再在把本地跟踪分支变基，将本地分支上的修改在远程分支上再重演一边，这时分叉就消除了，修改历史会编程线性的。
要特别注意一点，不要对在你的仓库外有副本的分支执行变基。即对已经提交到远程仓库上的修改，不要再应用变基，这样会乱。
