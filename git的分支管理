传统的版本管理软件，分支操作实际上会生成一份现有代码的物理拷贝，而Git只生成一个指向当前版本（又称"快照"）的指针，因此非常快捷易用。为了保证代码库分支清晰，应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。Git主分支的名字，默认叫做Master。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。

日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。如果想正式对外发布，就在Master分支上，对Develop分支进行"合并"（merge）。

除了前面两个常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：
* 功能（feature）分支
* 预发布（release）分支
* 修补bug（fixbug）分支

这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。

以Develop分支为例介绍Git分支相关的命令：
创建分支的命令：
    git checkout -b develop master
将Develop分支发布到Master分支的命令：
    # 切换到Master分支     　　git checkout master
    # 对Develop分支进行合并 　　git merge --no-ff develop
    默认情况下，Git执行"快进式合并"（fast-farward merge），会直接将Master分支指向Develop分支。使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法。
