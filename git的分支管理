Git保存的不是文件的变化或者差异，而是一系列不同时刻的文件快照，Git使用blob对象来保存它们。
在进行提交操作时，Git会保存一个提交对象（commit object），该提交对象会包含一个指向暂存内容快照的指针。 该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个父对象，而由多个分支合并产生的提交对象有多个父对象。
当使用git commit进行提交操作时，Git会先计算每一个子目录的校验和，然后在Git仓库中这些校验和保存为树对象。 随后，Git便会创建一个提交对象，它除了包含上面提到的那些信息外，还包含指向这个树对象（项目根目录）的指针。
Git仓库中有三种对象：blob对象（保存着文件快照）、树对象（记录着目录结构和blob对象索引）以及提交对象（包含着指向前述树对象的指针和所有提交信息，还有指向父提交对象的指针）。
Git的分支，本质上仅仅是指向提交对象的可变指针。比如默认的master分支，就是一个指向默认分支最后一次提交对象的指针，这个名字也没有任何特殊的意义，只是默认叫这个，大部分人都懒得改，习惯用这个而已。Git创建新分支只是创建了一个可以移动的新的指针。
Git中的当前分支，是名为HEAD的特殊指针。它实际上相当于当前分支的一个别名，可以指向任意提交节点。
传统的版本管理软件，分支操作实际上会生成一份现有代码的物理拷贝，而Git只生成一个指向当前版本（又称"快照"）的指针，因此非常快捷易用。为了保证代码库分支清晰，应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。日常开发应该在另一条分支上完成。我们把开发用的分支，叫做Develop。如果想正式对外发布，就在Master分支上，对Develop分支进行"合并"（merge）。
除了前面两个常设分支以外，还有一些临时性分支，用于应对一些特定目的的版本开发。临时性分支主要有三种：
* 功能（feature）分支
* 预发布（release）分支
* 修补bug（fixbug）分支
这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有Master和Develop。

查看分支信息：
git log --oneline --decorate --graph --all  输出提交历史、各个分支的指向以及项目的分支分叉情况
git branch  不可任何参数，即可看当所有分支的列表。--merged与--no-merged这两个有用的选项可以过滤这个列表中已经合并或尚未合并到当前分支的分支。
git branch -v   可以查看每个分支的最后一次提交。
创建分支：
git branch testing  在当前提交上创建一个新分支
git checkout -b develop <master>  在master分支但前提交节点处创建一个develop分支，同时切换到新分支上。此命令实际上是branch和checkout命令的简写。
分支删除：
git branch -d hotfix    使用带-d选项的命令，即可删除一个指定的分支，前提是此分支必须已经合并到其它分支上了。
分支合并：
git checkout master   切换到Master分支     　　
git merge --no-ff develop    将Develop分支合并进Master分支，注意如果Master分支此时没有新的提交，它还是Develop分支的直接祖先，默认情况下，Git执行"快进式合并"（fast-farward merge），会直接将Master分支指向Develop分支。使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。这样可以保证版本演进的清晰，我们希望采用这种做法。不带此参数时就按照默认方式合并。
git merge hotfix   将hotfix分支合并到当前分支master，如果master分支和新分支hotfix都做了不同的修改，则要做真正的合并。Git会使用两个分支的末端所指的快照以及这两个分支的工作祖先，做一个简单的三方合并。Git将此次三方合并的结果做了一个新的快照并且自动创建一个新的提交指向它。 这个被称作一次合并提交，它的特别之处在于他有不止一个父提交。
遇到冲突时的分支合并：
如果两个分支对同一行代码做了不同的修改，这时分支合并会出现冲突，无法完成自动合并。可以用status命令查看有那些文件出现冲突。git会生成一个冲突文件，它的状态是冲突未暂存状态，这个文件中会添加一些特殊区段表示冲突的具体内容。
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
HEAD 所指示的版本（当前分支所在的位置）在这个区段的上半部分（======= 的上半部分），而要合并进来的分支所指示的版本在 ======= 的下半部分。 为了解决冲突，你必须选择使用由 ======= 分割的两部分中的一个，或者你也可以自行合并这些内容。修改冲突之后，必须用add命令将对应的文件加入暂存，git就会将其标记为冲突已解决。这时合并还没有完成，status命令会显示冲突已解决，需要在次提交以完成合并。
